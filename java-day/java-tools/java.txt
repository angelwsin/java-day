java 命令启动顺序

            main              JLI_Launch                 JVMInit              ContinueInNewThread           ContinueInNewThread0  
  main.c--------------java.c------------------java_md.c---------------java.c------------------------java_md.c--------------------
  
  
  
  
  
  
  
  
  
                          JavaMain
  ------------java.c---------------------
  
  
                                           -----初始化jvm
                                           -----调用  java  main方法
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
静态函数库和动态函数库  类似  java 的jar

静态函数库是在编译链接时，把库文件代码全部加入到可执行文件中，因此生成的文件比较大，而运行时也就不需要库文件了。Linux中静态函数库的后缀名一般为”.a”，windows中为”.Lib”； 
动态函数库是在编译链接时没有把库文件代码加入到可执行文件中，而是将要调用的函数所在文件的和该函数在文件中的位置等信息链接进目标程序。linux中动态函数库的后缀名一般为”.so”，windows中为”.dll”。
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
代码清单 HotSpot源码结构

hotspot

├─agent                            Serviceability Agent的实现

├─make                             用来build出HotSpot的各种配置文件

├─src                              HotSpot VM的源代码

│  ├─cpu                            CPU相关代码

│  ├─os                             操作系相关代码

│  ├─os_cpu                         操作系统+CPU组合的相关代码

│  └─share                          平台无关的共通代码

│      ├─tools                        工具

│      │  ├─hsdis                      反汇编插件

│      │  ├─IdealGraphVisualizer       将Server编译器的中间代码可视化的工具

│      │  ├─launcher                   启动程序”java”

│      │  ├─LogCompilation             将-XX:+LogCompilation输出的日志（hotspot.log）整理成更容易阅读的格式的工具

│      │  └─ProjectCreator             生成Visual Studio的project文件的工具

│      └─vm                           HotSpot VM的核心代码

│          ├─adlc                       平台描述文件（上面的cpu或os_cpu里的*.ad 文件）的编译器

│          ├─asm                        汇编器接口

│          ├─c1                         Client编译器

│          ├─ci                         动态编译器的公共服务/接口

│          ├─classfile                   类文件的处理（包括类加载和系统符号表等）

│          ├─code                       动态生成的代码的管理

│          ├─compiler                   编译器接口

│          ├─gc_implementation          GC的实现

│          │  ├─concurrentMarkSweep      Concurrent Mark Sweep GC的实现

│          │  ├─g1                       Garbage-First GC的实现（不使用老的分代式GC框架）

│          │  ├─parallelScavenge         ParallelScavenge GC的实现（Server VM 默认，不使用老的分代式GC框架）

│          │  ├─parNew                   ParNew GC的实现

│          │  └─shared                   GC的共通实现

│          ├─gc_interface               GC的接口

│          ├─interpreter                解释器，包括”模板解释器”（官方版在用）和 “C++解释器”（官方版不再用）

│          ├─libadt                     一些抽象数据结构

│          ├─memory                     内存管理相关（老的分代式GC框架也在这里）

│          ├─oops                       HotSpot VM的对象系统的实现

│          ├─opto                       Server编译器

│          ├─prims                      HotSpot VM的对外接口，包括部分标准库的native部分和JVMTI实现

│          ├─runtime                    运行时支持库（包括线程管理、编译器调度、锁、反射等）

│          ├─services                   主要是用来支持JMX之类的管理功能的接口

│          ├─shark                      基于LLVM的JIT编译器（官方版里没有使用）

│          └─utilities                  一些基本的工具类

└─test                             单元测试