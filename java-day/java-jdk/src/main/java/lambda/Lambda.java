package lambda;

public class Lambda {


    /*

    Lambda 使用形式
    参数列表 -> 表达式
    参数列表 -> {表达式集合}

    需要注意 lambda 表达式隐含了 return 关键字，所以在单个的表达式中，
    我们无需显式的写 return 关键字，但是当表达式是一个语句集合的时候则需要显式添加 return 关键字，并用花括号{ } 将多个表达式包围起来


    基于函数式接口使用 lambda 表达式

    lambda 表达式的使用需要借助于 函数式接口，也就是说只有函数式接口出现地方，我们才可以将其用 lambda 表达式进行简化。
    那么什么是函数接口？函数接口的定义如下：

         函数式接口定义为仅含有一个抽象方法的接口。

    按照这个定义，我们可以确定一个接口如果声明了两个或两个以上的方法就不叫函数式接口，
    需要注意一点的是 java 8th 为接口的定义引入了默认的方法，我们可以用default
    在定义时我们为该接口添加了@FunctionalInterface注解，用于标记该接口是一个函数式接口，不过该注解是可选的，
    当添加了该注解之后，编译器会限制了该接口只允许有一个抽象方法，否则报错，所以推荐为函数式接口添加该注解。




    java 自带的函数式
    1）Predicate.test  过滤
    2) Consumer.accept 应用操作
    3）Function<T, R>.R apply(T t)执行转换操作，输入类型 T 的数据，返回 R 类型的结果



    类型推断
      在编码过程中，有时候可能会疑惑我们的调用代码会具体匹配哪个函数式接口，
      实际上编译器会根据参数、返回类型、异常类型（如果存在）等因素做正确的判定
    局部变量
      要求在 lambda 表达式中使用的变量必须 显式声明为 final 或事实上的 final 类型

     */
}
